@page "/game/{id}"

<div class="game-container">
    @if (GameSessionState.IsLoading is false &&
         GameSessionState.IsGameOver is false &&
         GameSessionState.IsGameWon is false)
    {
        <div class="attempts-bar">
            <span class="attempts-label">Attempts Remaining: </span>
            @for (int i = 0; i < GameSessionState.AttemptsRemaining; i++)
            {
                <span class="attempt">■</span>
            }
        </div>


        <div class="word-grid">
            @for (int i = 0; i < GameSessionState.Board.GetLength(0); i++)
            {
                <div class="word-row">
                    @for (int j = 0; j < GameSessionState.Board[0].GetLength(0); j++)
                    {
                        var cell = GameSessionState.Board[i][j];
                        var onClickEvent = cell.Word is null
                            ? EventCallback.Factory.Create(this, () => { })
                            : EventCallback.Factory.Create(this, () => GuessWordAsync(cell.Word));

                        var onHoverEvent = EventCallback.Factory.Create(this, () => ShowHoveredText(cell.Word ?? ""));

                        var cssClass = cell.Word == _hoveredText ? "word-char hovered" : "word-char";

                        <span class="@cssClass" @onmouseover="onHoverEvent" @onclick="onClickEvent">@cell.Character</span>
                    }
                </div>
            }
        </div>

        <div class="guess-input">
            @foreach (var text in GameSessionState.DialogMessages)
            {
                <span>@text</span>
            }
            <span> > @_hoveredText</span>
        </div>
    }

    @if (GameSessionState.IsGameWon)
    {
        <div>:)</div>
    }

    @if (GameSessionState.IsGameOver)
    {
        <div>:'(</div>
    }
</div>